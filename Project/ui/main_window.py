# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from ui.get_data_from_device_dialog import Ui_Get_data_from_device_dialog
from ui.get_data_from_file_dialog import Ui_Get_data_from_file_dialog
from source.utils import Data_type, Status

import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(901, 574)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.callsTab = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.callsTab.sizePolicy().hasHeightForWidth())
        self.callsTab.setSizePolicy(sizePolicy)
        self.callsTab.setObjectName("callsTab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.callsTab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.callsVerticalLayout_2 = QtWidgets.QVBoxLayout()
        self.callsVerticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.callsVerticalLayout_2.setObjectName("callsVerticalLayout_2")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_2.setContentsMargins(40, 10, 40, 10)
        self.gridLayout_2.setHorizontalSpacing(40)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.pushButtonFilterCalls = QtWidgets.QPushButton(self.callsTab)
        self.pushButtonFilterCalls.setObjectName("pushButtonFilterCalls")
        self.gridLayout_2.addWidget(self.pushButtonFilterCalls, 1, 5, 1, 1)
        self.labelDatefrom = QtWidgets.QLabel(self.callsTab)
        self.labelDatefrom.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDatefrom.setObjectName("labelDatefrom")
        self.gridLayout_2.addWidget(self.labelDatefrom, 0, 0, 1, 1)
        self.toDateTimeEdit = QtWidgets.QDateTimeEdit(self.callsTab)
        self.toDateTimeEdit.setObjectName("toDateTimeEdit")
        self.gridLayout_2.addWidget(self.toDateTimeEdit, 1, 1, 1, 1)
        self.fromDateTimeEdit = QtWidgets.QDateTimeEdit(self.callsTab)
        self.fromDateTimeEdit.setObjectName("fromDateTimeEdit")
        self.gridLayout_2.addWidget(self.fromDateTimeEdit, 1, 0, 1, 1)
        self.labelDate_to = QtWidgets.QLabel(self.callsTab)
        self.labelDate_to.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDate_to.setObjectName("labelDate_to")
        self.gridLayout_2.addWidget(self.labelDate_to, 0, 1, 1, 1)
        self.labelNUmber = QtWidgets.QLabel(self.callsTab)
        self.labelNUmber.setAlignment(QtCore.Qt.AlignCenter)
        self.labelNUmber.setObjectName("labelNUmber")
        self.gridLayout_2.addWidget(self.labelNUmber, 0, 4, 1, 1)
        self.labelName = QtWidgets.QLabel(self.callsTab)
        self.labelName.setAlignment(QtCore.Qt.AlignCenter)
        self.labelName.setObjectName("labelName")
        self.gridLayout_2.addWidget(self.labelName, 0, 2, 1, 2)
        self.lineEditNameCall = QtWidgets.QLineEdit(self.callsTab)
        self.lineEditNameCall.setObjectName("lineEditNameCall")
        self.gridLayout_2.addWidget(self.lineEditNameCall, 1, 2, 2, 2)
        self.lineEditNumberCall = QtWidgets.QLineEdit(self.callsTab)
        self.lineEditNumberCall.setObjectName("lineEditNumberCall")
        self.gridLayout_2.addWidget(self.lineEditNumberCall, 1, 4, 2, 1)
        self.callsVerticalLayout_2.addLayout(self.gridLayout_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.callTableWidget = QtWidgets.QTableWidget(self.callsTab)
        self.callTableWidget.setObjectName("callTableWidget")
        self.callTableWidget.setColumnCount(0)
        self.callTableWidget.setRowCount(0)
        self.horizontalLayout_2.addWidget(self.callTableWidget)
        self.callsVerticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.addLayout(self.callsVerticalLayout_2)
        self.tabWidget.addTab(self.callsTab, "")
        self.contactsTab = QtWidgets.QWidget()
        self.contactsTab.setObjectName("contactsTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.contactsTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(40, -1, 40, 15)
        self.gridLayout.setHorizontalSpacing(70)
        self.gridLayout.setVerticalSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEditNameContact = QtWidgets.QLineEdit(self.contactsTab)
        self.lineEditNameContact.setObjectName("lineEditNameContact")
        self.gridLayout.addWidget(self.lineEditNameContact, 2, 0, 1, 1)
        self.pushButtonFilterContacts = QtWidgets.QPushButton(self.contactsTab)
        self.pushButtonFilterContacts.setObjectName("pushButtonFilterContacts")
        self.gridLayout.addWidget(self.pushButtonFilterContacts, 2, 1, 1, 1)
        self.labelContacts_name = QtWidgets.QLabel(self.contactsTab)
        self.labelContacts_name.setAlignment(QtCore.Qt.AlignCenter)
        self.labelContacts_name.setObjectName("labelContacts_name")
        self.gridLayout.addWidget(self.labelContacts_name, 1, 0, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout)
        self.contactsTableWidget = QtWidgets.QTableWidget(self.contactsTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.contactsTableWidget.sizePolicy().hasHeightForWidth())
        self.contactsTableWidget.setSizePolicy(sizePolicy)
        self.contactsTableWidget.setObjectName("contactsTableWidget")
        self.contactsTableWidget.setColumnCount(0)
        self.contactsTableWidget.setRowCount(0)
        self.verticalLayout_4.addWidget(self.contactsTableWidget)
        self.tabWidget.addTab(self.contactsTab, "")
        self.verticalLayout_5.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 901, 22))
        self.menubar.setObjectName("menubar")
        self.menuActions = QtWidgets.QMenu(self.menubar)
        self.menuActions.setObjectName("menuActions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionGet_data_from_device = QtWidgets.QAction(MainWindow)
        self.actionGet_data_from_device.setObjectName("actionGet_data_from_device")
        self.actionCalls = QtWidgets.QAction(MainWindow)
        self.actionCalls.setObjectName("actionCalls")
        self.actionContacts = QtWidgets.QAction(MainWindow)
        self.actionContacts.setObjectName("actionContacts")
        self.actionGet_data_from_file = QtWidgets.QAction(MainWindow)
        self.actionGet_data_from_file.setObjectName("actionGet_data_from_file")
        self.menuActions.addAction(self.actionGet_data_from_device)
        self.menuActions.addAction(self.actionGet_data_from_file)
        self.menubar.addAction(self.menuActions.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

# Manually changed
        self.actionGet_data_from_device.triggered.connect(self.display_get_data_device_dialog)
        self.actionGet_data_from_file.triggered.connect(self.display_get_data_file_dialog)

        self.calls_csv = None
        self.contacts_csv = None
        self.default_dt_value = self.fromDateTimeEdit.dateTime()

        # Signals/Slots connection
        self.pushButtonFilterCalls.clicked.connect(self.filter_calls_data)
        self.pushButtonFilterContacts.clicked.connect(self.filter_contacts_data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Call Investigator"))
        self.pushButtonFilterCalls.setText(_translate("MainWindow", "Filter"))
        self.labelDatefrom.setText(_translate("MainWindow", "Date/Time from"))
        self.labelDate_to.setText(_translate("MainWindow", "Date/TIme to"))
        self.labelNUmber.setText(_translate("MainWindow", "Number"))
        self.labelName.setText(_translate("MainWindow", "Name"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.callsTab), _translate("MainWindow", "Calls"))
        self.labelContacts_name.setText(_translate("MainWindow", "Name"))
        self.pushButtonFilterContacts.setText(_translate("MainWindow", "Filter"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.contactsTab), _translate("MainWindow", "Contacts"))
        self.menuActions.setTitle(_translate("MainWindow", "Actions"))
        self.actionGet_data_from_device.setText(_translate("MainWindow", "Get data from device"))
        self.actionCalls.setText(_translate("MainWindow", "Calls"))
        self.actionContacts.setText(_translate("MainWindow", "Contacts"))
        self.actionGet_data_from_file.setText(_translate("MainWindow", "Get data from file"))

# Manually added
    def display_get_data_device_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_Get_data_from_device_dialog()
        ui.setupUi(dialog)
        rsp = dialog.exec_()

        if rsp == QtWidgets.QDialog.Accepted:
            data_from_device = ui.get_data_from_device()

            for data in data_from_device:
                if data[0] == Status.OK:
                    if data[1] == Data_type.CALL:
                        self.calls_csv = data[2]
                        self.display_calls_data()
                    elif data[1] == Data_type.CONTACTS:
                        self.contacts_csv = data[2]
                        self.display_contacts_data()
                    else:
                        raise Exception("Logic error")
                else:
                    print("Error while getting data from a device")

    def display_get_data_file_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_Get_data_from_file_dialog()
        ui.setupUi(dialog)
        rsp = dialog.exec_()

        if rsp == QtWidgets.QDialog.Accepted:
            data_type, file_path = ui.get_file_path()
            if data_type == Data_type.CALL:
                self.calls_csv = file_path
                self.display_calls_data()
            elif data_type == Data_type.CONTACTS:
                self.contacts_csv = file_path
                self.display_contacts_data()

    def display_calls_data(self):
        with open(self.calls_csv) as f:
            reader = csv.DictReader(f)

            self.callTableWidget.setColumnCount(len(reader.fieldnames))
            self.callTableWidget.setHorizontalHeaderLabels(reader.fieldnames)
            self.callTableWidget.setRowCount(10)

            row_count = 0
            for row in reader:
                self.callTableWidget.setRowCount(row_count+1)
                column_count = 0
                for key in row:
                    if key == 'date':
                        self.callTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(self.dtToStr(row[key])))
                    else:
                        self.callTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(row[key]))
                    column_count+=1

                row_count+=1

            self.tabWidget.setCurrentIndex(0)

    def display_contacts_data(self):
        with open(self.contacts_csv) as f:
            reader = csv.DictReader(f)

            self.contactsTableWidget.setColumnCount(len(reader.fieldnames))
            self.contactsTableWidget.setHorizontalHeaderLabels(reader.fieldnames)
            self.contactsTableWidget.setRowCount(10)

            row_count = 0
            for row in reader:
                self.contactsTableWidget.setRowCount(row_count+1)
                column_count = 0
                for key in row:
                    if key == 'date':
                        self.contactsTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(self.dtToStr(row[key])))
                    else:
                        self.contactsTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(row[key]))
                    column_count+=1

                row_count+=1

            self.tabWidget.setCurrentIndex(1)

    def filter_calls_data(self):
        if self.calls_csv is None:
            print("No data for filtering")
            return

        # Params for filtering
        name_text = self.lineEditNameCall.text()
        number_text = self.lineEditNumberCall.text()
        date_from = self.fromDateTimeEdit.dateTime()
        date_to = self.toDateTimeEdit.dateTime()

        with open(self.calls_csv) as f:
            reader = csv.DictReader(f)

            self.callTableWidget.setColumnCount(len(reader.fieldnames))
            self.callTableWidget.setHorizontalHeaderLabels(reader.fieldnames)
            self.callTableWidget.setRowCount(10)

            row_count = 0
            for row in reader:
                if row['name'].lower().find(name_text.lower()) != -1:
                    if row['number'].find(number_text) != -1:
                        if self.checkDateTimeRange(row['date'], date_from, date_to):
                            self.callTableWidget.setRowCount(row_count+1)
                            column_count = 0
                            for key in row:
                                if key == 'date':
                                    self.callTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(self.dtToStr(row[key])))
                                else:
                                    self.callTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(row[key]))
                                column_count+=1

                            row_count+=1

    def filter_contacts_data(self):
        if self.contacts_csv is None:
            print("No data for filtering")
            return

        # Params for filtering
        name_text = self.lineEditNameContact.text()

        with open(self.contacts_csv) as f:
            reader = csv.DictReader(f)

            self.contactsTableWidget.setColumnCount(len(reader.fieldnames))
            self.contactsTableWidget.setHorizontalHeaderLabels(reader.fieldnames)
            self.contactsTableWidget.setRowCount(10)

            row_count = 0
            for row in reader:
                if row['display_name'].lower().find(name_text.lower()) != -1:
                    self.contactsTableWidget.setRowCount(row_count+1)
                    column_count = 0
                    for key in row:
                        if key == 'date':
                            self.contactsTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(self.dtToStr(row[key])))
                        else:
                            self.contactsTableWidget.setItem(row_count, column_count, QtWidgets.QTableWidgetItem(row[key]))
                        column_count+=1

                    row_count+=1

    def checkDateTimeRange(self, check_dt, from_dt, to_dt):
        q_check_dt = self.convertDtToQtDt(check_dt)

        if from_dt != self.default_dt_value and from_dt > q_check_dt:
            return False

        if to_dt != self.default_dt_value and to_dt < q_check_dt:
            return False

        return True

    def convertDtToQtDt(self, ms_since_epoch):
        q_dt = QtCore.QDateTime()
        q_dt.setMSecsSinceEpoch(int(ms_since_epoch))

        return q_dt

    def dtToStr(self, dt):
        converted = self.convertDtToQtDt(dt)

        # Qt formats
        # QtCore.Qt.DateFormat.ISODate
        # QtCore.Qt.DateFormat.ISODateWithMs
        # QtCore.Qt.DateFormat.TextDate
        # QtCore.Qt.DateFormat.RFC2822Date

        return converted.toString(QtCore.Qt.DateFormat.RFC2822Date)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
